#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }

    #[test]
    fn felix() {
        let (height, width): (u8, u8) = (0x20, 0x20);
        let scale: u16 = 0x0100;
        let directions: u8 = 0x05;
        let animations: u8 = 0x33;
        let (x_offset, y_offset): (u8, u8) = (0x00, 0x02);
        let collision: u8 = 0x10;
        let compression: u8 = 0x00;
        let first_sprite: Vec<u8> = vec![
            0xFF, 0xFF, 0xFF, 0xE8, 0x2D, 0xFF, 0xD3, 0x24, 0xFE, 0xD3, 0x24, 0xFE, 0x24, 0x24,
            0xD9, 0xD9, 0x24, 0xDA, 0xF6, 0xDA, 0x24, 0x12, 0x12, 0x12, 0x24, 0x24, 0x24, 0x12,
            0x24, 0xF5, 0x24, 0x12, 0x24, 0x24, 0x12, 0x12, 0x12, 0x24, 0x24, 0x2D, 0xDA, 0xF3,
            0x33, 0x24, 0xD3, 0xD3, 0x24, 0xD3, 0xD3, 0x2D, 0x24, 0x24, 0x2D, 0xD9, 0xF3, 0x2D,
            0x5E, 0x5F, 0x5E, 0x34, 0x5E, 0x5E, 0x89, 0x5E, 0x5E, 0x0D, 0xD9, 0xF2, 0x24, 0x24,
            0x2D, 0x34, 0x5F, 0x34, 0x8A, 0x5F, 0x5E, 0x34, 0x5E, 0x33, 0x33, 0xF2, 0x24, 0x12,
            0xD3, 0x24, 0xD3, 0x24, 0x35, 0x0B, 0xD3, 0xD3, 0x24, 0x2D, 0xDB, 0xF2, 0xDA, 0xD9,
            0x24, 0x24, 0x24, 0xD3, 0xD8, 0x0B, 0x24, 0x24, 0x24, 0x57, 0xDB, 0xF3, 0x12, 0x24,
            0x12, 0x24, 0x2D, 0xD3, 0xD3, 0x24, 0x24, 0x12, 0x0E, 0xDE, 0xE2, 0xD3, 0xD3, 0xEE,
            0xD9, 0x12, 0x12, 0xD3, 0x24, 0xD3, 0xD3, 0x24, 0x12, 0x12, 0x5E, 0x58, 0xE0, 0x2D,
            0xD3, 0xD3, 0xD3, 0x2D, 0xEA, 0xD9, 0xDA, 0x0D, 0xAD, 0xDC, 0x01, 0x24, 0x24, 0xD3,
            0x24, 0x12, 0x24, 0x34, 0x34, 0xDB, 0xE0, 0xD3, 0xD3, 0x34, 0xD3, 0x24, 0xE7, 0x0D,
            0xDB, 0xDB, 0x58, 0x5E, 0x5E, 0x0E, 0x82, 0xD9, 0xD9, 0x12, 0x24, 0x24, 0x12, 0x33,
            0x33, 0x0B, 0x06, 0xB4, 0x83, 0x0B, 0xD3, 0x24, 0xE6, 0xDB, 0xDB, 0xDB, 0xDB, 0x0D,
            0xDA, 0xDA, 0x50, 0x7A, 0x9F, 0x9E, 0x7A, 0x50, 0x24, 0x12, 0xD9, 0x13, 0x14, 0x11,
            0x5D, 0x0F, 0xB4, 0xD3, 0x24, 0xD9, 0xE8, 0x7B, 0x9E, 0x9E, 0x9F, 0xC9, 0xC9, 0xC9,
            0x9E, 0x74, 0x7A, 0xD0, 0x24, 0x13, 0x32, 0x32, 0xDD, 0xD8, 0x5D, 0x89, 0x2D, 0x12,
            0x24, 0x24, 0xE8, 0xC9, 0xC9, 0xC9, 0xA5, 0x7A, 0x74, 0x74, 0x9E, 0xC9, 0xD0, 0x88,
            0x32, 0x13, 0x13, 0x13, 0x32, 0xB5, 0x12, 0xED, 0x7A, 0x50, 0x4F, 0x50, 0x7A, 0x9E,
            0xC9, 0xD0, 0xD6, 0xD7, 0x0D, 0xB5, 0x32, 0x32, 0x32, 0x32, 0xB5, 0xD9, 0xED, 0x50,
            0x7A, 0x9F, 0xC9, 0xC9, 0xD0, 0xD6, 0xD6, 0xD7, 0xE0, 0xDA, 0xD9, 0xD9, 0xB5, 0xB5,
            0xD9, 0x24, 0x34, 0xEE, 0xC9, 0xCF, 0xD0, 0xD6, 0xD6, 0xD6, 0xD6, 0xE1, 0x33, 0x33,
            0x34, 0x33, 0x5E, 0x65, 0x65, 0x5E, 0x33, 0xEE, 0xD6, 0xD6, 0xD6, 0xD7, 0xE4, 0x33,
            0x5F, 0x8A, 0x8A, 0x8A, 0x8A, 0x58, 0xD3, 0x0B, 0xE0, 0xD9, 0x0D, 0xDA, 0xE9, 0xD6,
            0xD6, 0xD7, 0xE5, 0x12, 0x33, 0x5E, 0x5F, 0x34, 0x2D, 0x2D, 0x5E, 0x17, 0x0B, 0x0D,
            0xDB, 0x0D, 0xF3, 0x12, 0x12, 0x12, 0xDE, 0xAD, 0x0F, 0x5F, 0x0B, 0xD8, 0xD9, 0x0D,
            0xDB, 0xF7, 0x0F, 0x8A, 0x17, 0x18, 0x0B, 0xDB, 0xDB, 0xDB, 0xF7, 0x33, 0x0B, 0x17,
            0x18, 0x3A, 0x0D, 0x0D, 0xF9, 0xD3, 0x0B, 0x0B, 0x0D, 0xDA, 0xFB, 0x24, 0xDA, 0xDA,
            0xFD, 0xDA, 0xE9, 0x00,
        ];
    }
}
