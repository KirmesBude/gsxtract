use crate::util::NextExt;
use bitvec::{order::Msb0, view::BitViewSized};

pub fn from_standard_lz(raw_data: &[u8]) -> Vec<u8> {
    let mut iter = raw_data.iter();
    let format = iter.next_u8();

    match format {
        0x00 => from_standard_lz_0(iter),
        0x01 => from_standard_lz_1(iter),
        0x02 => from_standard_lz_2(iter),
        _ => !unreachable!(), /* TODO: Better? */
    }
}

fn from_standard_lz_0<'a>(iter: impl IntoIterator<Item = &'a u8>) -> Vec<u8> {
    let mut iter = iter.into_iter();
    let mut decoded = vec![];

    let mut bits = iter.next_u16() as u32;
    let mut nbits = 16;

    let mut shift;
    let mut ncopy;

    loop {
        if (bits & 0x01) != 0 {
            decoded.push(((bits >> 1) & 0xFF) as u8);
            shift = 9;
            ncopy = 0;
        } else if (bits & 0x02) == 0 {
            shift = 2;
            ncopy = 2;
        } else if (bits & 0x04) == 0 {
            shift = 3;
            ncopy = 3;
        } else if (bits & 0x08) == 0 {
            shift = 4;
            ncopy = 4;
        } else if (bits & 0x10) == 0 {
            shift = 5;
            ncopy = 5;
        } else if (bits & 0x20) == 0 {
            if (bits & 0x40) == 0 {
                shift = 7;
                ncopy = 6;
            } else {
                shift = 7;
                ncopy = 7;
            }
        } else {
            shift = 8;
            ncopy = (bits >> 6) & 3;

            if ncopy == 0 {
                shift = 15;
                ncopy = (bits >> 8) & 0x7F;

                if ncopy == 0 {
                    break;
                } else {
                    ncopy += 10;
                }
            } else {
                ncopy += 7;
            }
        }

        bits >>= shift;
        nbits -= shift;

        if nbits < 15 {
            let new = iter.next_u16() as u32;
            bits |= new << nbits;
            nbits += 16;
        }

        if ncopy > 0 {
            let mut offset;
            if (bits & 1) != 0 {
                offset = ((bits >> 1) & 0x1F) as usize;
                shift = 6;
            } else {
                let buflen = decoded.len() as isize - 33;

                if buflen >= 0x800 {
                    shift = 13;
                    offset = ((bits >> 1) & 0xFFF) as usize;
                } else {
                    shift = 12;
                    let mut bit = 1 << 11;

                    while (buflen & bit) == 0 && shift > 0 {
                        shift -= 1;
                        bit >>= 1;
                    }

                    offset = (bits >> 1) as usize & ((1 << shift) - 1);
                    shift += 1;
                }

                offset += 32;
            }

            bits >>= shift;
            nbits -= shift;
            if nbits < 15 {
                let new = iter.next_u16() as u32;
                bits |= new << nbits;
                nbits += 16;
            }

            offset += 1;
            while ncopy > 0 {
                if decoded.len() < offset {
                    return vec![];
                }
                decoded.push(decoded[decoded.len() - offset]);
                ncopy -= 1;
            }
        }
    }

    decoded
}

fn from_standard_lz_1<'a>(iter: impl IntoIterator<Item = &'a u8>) -> Vec<u8> {
    let mut iter = iter.into_iter();
    let mut decoded = vec![];

    loop {
        let byte = iter.next_u8();

        for bit in byte.into_bitarray::<Msb0>() {
            if !bit {
                decoded.push(iter.next_u8());
            } else {
                let byte1 = iter.next_u8();
                let byte2 = iter.next_u8();

                let mut nbytes = byte1 as usize & 0x0F;
                let offset = ((byte1 as usize & 0xF0) << 4) | byte2 as usize;

                if nbytes == 0 {
                    if offset == 0 {
                        return decoded;
                    } else {
                        nbytes = iter.next_u8() as usize + 16;
                    }
                }

                for _ in 0..=nbytes {
                    decoded.push(decoded[decoded.len() - offset]);
                }
            }
        }
    }
}

fn from_standard_lz_2<'a>(_iter: impl IntoIterator<Item = &'a u8>) -> Vec<u8> {
    vec![]
}

#[cfg(test)]
mod tests {
    use crate::comp::from_standard_lz;

    #[test]
    fn test_lz_0() {
        let input = [
            0x00, 0x01, 0x7C, 0xFE, 0x81, 0x82, 0x0D, 0xB5, 0x67, 0x53, 0xF8, 0x40, 0xFA, 0xD9,
            0x04, 0x03, 0x6A, 0x2B, 0xF1, 0x71, 0xE8, 0x18, 0xA0, 0xDB, 0x05, 0x3E, 0x0C, 0x1D,
            0xF4, 0x1B, 0x72, 0xC3, 0x67, 0xC3, 0x2B, 0x11, 0xF1, 0x69, 0xE8, 0xC9, 0x5D, 0x30,
            0xF7, 0xAF, 0x35, 0x1B, 0x36, 0xF8, 0x38, 0x7E, 0xF1, 0x50, 0x30, 0x6D, 0xC5, 0x59,
            0x3E, 0x0C, 0x40, 0x7E, 0xB1, 0xD6, 0xAE, 0xBD, 0xA5, 0x42, 0x85, 0x36, 0xBF, 0xD2,
            0x10, 0xFD, 0xF2, 0x39, 0xF4, 0xB1, 0xD2, 0x24, 0x91, 0x1F, 0x07, 0x7F, 0xE1, 0xC7,
            0x99, 0x82, 0xB7, 0xB7, 0xF8, 0x20, 0x78, 0x88, 0x65, 0x2C, 0x1C, 0xFC, 0x30, 0x3B,
            0x0D, 0x4E, 0x14, 0x8C, 0x35, 0xC8, 0x47, 0xE1, 0x47, 0xA1, 0x34, 0x69, 0xF8, 0x37,
            0xF0, 0x27, 0xE9, 0xE5, 0x93, 0xE0, 0x41, 0x41, 0x9D, 0xDC, 0x5B, 0xC8, 0xD3, 0xAC,
            0xA1, 0x48, 0x53, 0x70, 0xAB, 0x4F, 0xA2, 0xCF, 0xFA, 0xE1, 0x43, 0xC1, 0x33, 0xF4,
            0x6B, 0xE8, 0xB7, 0x4C, 0xDC, 0xFA, 0xDB, 0x07, 0xF1, 0x6F, 0xE5, 0xFF, 0xF0, 0x2A,
            0x37, 0x02, 0x6C, 0x29, 0x71, 0xBA, 0xD7, 0xD6, 0xDC, 0x3E, 0x87, 0x7E, 0x0B, 0xB6,
            0xD8, 0xDA, 0xA1, 0x03, 0xC7, 0xC1, 0x2D, 0x19, 0x62, 0x83, 0x80, 0x34, 0x67, 0x7C,
            0x0C, 0x7F, 0x9A, 0x3B, 0xB1, 0x90, 0x41, 0x86, 0x2E, 0xC1, 0x82, 0xFD, 0xD8, 0xD7,
            0xE2, 0xB6, 0x0F, 0xE2, 0x3F, 0x73, 0xE7, 0x4E, 0x9A, 0x12, 0xFC, 0x3F, 0x08, 0x2E,
            0xEC, 0xE8, 0x25, 0x88, 0xA4, 0x79, 0xE5, 0x63, 0xE0, 0x01, 0xFE, 0xD1, 0x4F, 0x70,
            0xA1, 0xC5, 0x99, 0x0D, 0xDA, 0x7E, 0xF9, 0x10, 0x80, 0x60, 0x3C, 0x38, 0x13, 0x9B,
            0xA0, 0x05, 0xC1, 0x69, 0x0C, 0x50, 0x02, 0x1E, 0x10, 0xF8, 0x10, 0x78, 0xF0, 0xAB,
            0x19, 0xAE, 0x49, 0x42, 0x1F, 0x9B, 0x3D, 0x4B, 0x16, 0x98, 0x80, 0x46, 0xD2, 0xF4,
            0xF2, 0x19, 0xFC, 0xB7, 0xEB, 0xDC, 0x39, 0x33, 0x1B, 0x5B, 0xE0, 0x8B, 0x2C, 0x0C,
            0xFA, 0x7D, 0x10, 0x86, 0xBC, 0x8D, 0x27, 0x4A, 0x40, 0x13, 0x02, 0x7E, 0x0A, 0x29,
            0xC3, 0x47, 0xE1, 0x27, 0xE4, 0x60, 0xBF, 0x11, 0x45, 0x80, 0xF0, 0x49, 0x04, 0x73,
            0xF6, 0xA9, 0x16, 0x21, 0x08, 0x92, 0xCC, 0xF1, 0x51, 0xFC, 0xB1, 0x03, 0xAD, 0xB8,
            0x40, 0x70, 0x1A, 0xC0, 0xD4, 0x49, 0xE2, 0xB3, 0xF0, 0x41, 0x97, 0x7D, 0xB1, 0x2F,
            0xD4, 0xA9, 0x83, 0x51, 0x2E, 0xEC, 0xF3, 0x71, 0x00, 0x16, 0xD8, 0xC8, 0x36, 0x18,
            0xCA, 0x87, 0xC1, 0x3B, 0x47, 0xD0, 0x34, 0x15, 0x61, 0xCE, 0x2F, 0x1F, 0xC8, 0x0F,
            0x81, 0x73, 0xDF, 0xF6, 0x29, 0xD8, 0xC6, 0x07, 0x00, 0x00, 0x01, 0x7C, 0xFE, 0x81,
            0x0B, 0x6A, 0xCF, 0x26, 0xF0, 0x79, 0xE4, 0xA1, 0x72, 0x6F, 0xD8, 0x30, 0xDB, 0x07,
            0x02, 0xE0, 0xF6, 0x6C, 0xFA, 0x01, 0xF6, 0xFB, 0x28, 0x00, 0xDC, 0xE6, 0xBE, 0x0D,
            0x8F, 0xDB, 0xB5, 0x79, 0xE8, 0xAF, 0xF8, 0x20, 0xFA, 0x0D, 0xB5, 0x7B, 0x1B, 0x2D,
            0x84, 0x14, 0xEC, 0x00, 0x13, 0x1F, 0x84, 0x8F, 0xDA, 0xAF, 0x88, 0x4D, 0x08, 0x88,
            0xD8, 0xDA, 0x21, 0xF7, 0xEC, 0x0C, 0x3E, 0x08, 0x1E, 0x5E, 0xF5, 0x7E, 0x85, 0x0B,
            0xB5, 0x11, 0xE0, 0x55, 0x6E, 0x3D, 0x3E, 0x08, 0x1F, 0x88, 0x7B, 0x4B, 0x07, 0x21,
            0x80, 0x23, 0x0C, 0x18, 0xE3, 0x83, 0xF0, 0x65, 0xB6, 0x70, 0x92, 0x4D, 0xE4, 0x32,
            0xA6, 0xC3, 0x2B, 0x1F, 0x06, 0x7C, 0xD2, 0x69, 0x8B, 0xFA, 0x2D, 0xB1, 0x62, 0xF9,
            0x30, 0xF4, 0x03, 0x8E, 0x0D, 0x69, 0xB6, 0x6C, 0x49, 0x13, 0x8B, 0xC4, 0x87, 0xE1,
            0x9F, 0xD1, 0x30, 0xE8, 0x8E, 0xFA, 0xDA, 0x3E, 0x0D, 0x5B, 0xC1, 0x29, 0x56, 0x9D,
            0x33, 0x00, 0xD5, 0x61, 0xAB, 0x0F, 0x43, 0xD0, 0x12, 0xBD, 0x7F, 0x6F, 0xFD, 0xB0,
            0xB5, 0x60, 0xC1, 0xDF, 0xB1, 0x4A, 0xF8, 0x30, 0xFE, 0x0C, 0xBF, 0x3F, 0x10, 0x14,
            0x8C, 0xD5, 0x25, 0x83, 0x4F, 0xE3, 0x2F, 0x11, 0x8B, 0xFE, 0x77, 0x97, 0x1F, 0x3F,
            0x7C, 0x1A, 0x7F, 0x92, 0x12, 0xA7, 0x7B, 0x1D, 0xDC, 0x92, 0x41, 0x41, 0x6C, 0x9F,
            0xC5, 0x7F, 0x3A, 0xF6, 0xE9, 0x5F, 0xCD, 0xF6, 0xB1, 0xF3, 0xF8, 0x30, 0x7E, 0xFC,
            0x10, 0x9B, 0xFF, 0xC2, 0x85, 0x16, 0x39, 0x7C, 0x1C, 0x7D, 0x88, 0x7D, 0x77, 0xF8,
            0x5B, 0xB4, 0xD8, 0xE7, 0xD3, 0xE0, 0x47, 0xB0, 0x10, 0xC1, 0xEE, 0xDC, 0x49, 0x93,
            0x21, 0x58, 0x16, 0x1F, 0x84, 0xDF, 0x14, 0x6C, 0xD1, 0x3F, 0x02, 0x1F, 0xDC, 0xD9,
            0x97, 0x05, 0x9F, 0xF8, 0x2C, 0x74, 0x54, 0x22, 0x8B, 0xF9, 0xE0, 0xCE, 0x69, 0xF9,
            0xC5, 0x67, 0xA1, 0xAB, 0xD8, 0x23, 0x82, 0xFD, 0x38, 0x4D, 0x90, 0xE1, 0xC7, 0x85,
            0x33, 0x3E, 0x0C, 0xBE, 0x04, 0x6A, 0x54, 0x07, 0xB9, 0x10, 0x04, 0xBA, 0xD0, 0xC5,
            0x87, 0x01, 0xB0, 0x1F, 0xFB, 0x2E, 0xC4, 0x6E, 0x71, 0xE1, 0x34, 0x3C, 0x89, 0xE5,
            0xD3, 0x00, 0x1A, 0x81, 0x6C, 0x04, 0xF2, 0x70, 0xA6, 0x4F, 0x08, 0xD4, 0x3E, 0x00,
            0x00, 0x01, 0x7C, 0xFE, 0x81, 0x05, 0xB3, 0x67, 0x5F, 0xF1, 0x89, 0xEC, 0x1B, 0x66,
            0x7B, 0x02, 0x1F, 0x88, 0x8E, 0xDB, 0x14, 0xB5, 0x6B, 0xFB, 0x38, 0x00, 0x10, 0xDF,
            0x1E, 0x30, 0x3B, 0xF7, 0x86, 0xDC, 0x3C, 0x3E, 0x0C, 0x3D, 0xF0, 0x81, 0xC7, 0x2B,
            0xF2, 0xDA, 0x42, 0xE2, 0xB3, 0xE0, 0xB1, 0x41, 0xBD, 0x0C, 0x90, 0x0F, 0x3E, 0x8A,
            0x7F, 0x22, 0xF3, 0x6D, 0x68, 0xA8, 0xDD, 0xDB, 0x21, 0xE4, 0x93, 0xF8, 0x7F, 0x6D,
            0x40, 0x1E, 0x84, 0x00, 0x07, 0x0C, 0xF0, 0x61, 0xF8, 0x91, 0x66, 0x43, 0x87, 0x82,
            0xF0, 0x80, 0x3E, 0xAF, 0xD4, 0xFB, 0x28, 0x7E, 0x66, 0x60, 0xE8, 0x20, 0x23, 0x06,
            0x60, 0x54, 0x1A, 0x1F, 0x05, 0x3F, 0xAD, 0x6A, 0x0B, 0x00, 0x09, 0x03, 0x53, 0x1B,
            0xD2, 0xBC, 0xF2, 0x49, 0xFC, 0xF7, 0xC8, 0x45, 0x0F, 0x80, 0x70, 0x6C, 0x49, 0x13,
            0xCB, 0x27, 0xF1, 0x77, 0xC0, 0x2E, 0xE8, 0x90, 0x6E, 0x08, 0xF5, 0x9B, 0xC9, 0x07,
            0xD1, 0xDF, 0x3E, 0x0D, 0x2E, 0x4A, 0x64, 0xD8, 0xD2, 0xBB, 0x77, 0xC1, 0x0F, 0x04,
            0x1D, 0x7C, 0x10, 0x3F, 0x68, 0x88, 0x4D, 0x90, 0x81, 0x20, 0x56, 0xC1, 0xAD, 0xFC,
            0x5B, 0x7D, 0x12, 0xFF, 0x85, 0xD8, 0x49, 0x5A, 0x9C, 0x16, 0x00, 0x30, 0xC2, 0x87,
            0xAE, 0xB1, 0x6E, 0xFB, 0x18, 0xFA, 0x33, 0x75, 0xEE, 0xA4, 0x49, 0x73, 0xBA, 0x85,
            0x09, 0x01, 0x00, 0xDC, 0xF9, 0xE5, 0x73, 0x10, 0x0C, 0x79, 0x9D, 0x33, 0x67, 0xF0,
            0x45, 0x0B, 0x13, 0x40, 0x89, 0x34, 0x15, 0x7C, 0x0E, 0xFF, 0x6D, 0x78, 0x14, 0x80,
            0x38, 0xD8, 0xBE, 0xD8, 0x39, 0x72, 0x40, 0x80, 0xD8, 0x77, 0xEE, 0x9C, 0xF1, 0x49,
            0x00, 0xA9, 0xC4, 0x8F, 0x10, 0xC1, 0x7E, 0x20, 0x00, 0x82, 0x12, 0x77, 0x00, 0x42,
            0x6E, 0x9F, 0xC3, 0x5F, 0x02, 0x1E, 0x84, 0xF8, 0xF1, 0x03, 0x01, 0x64, 0x09, 0xB1,
            0xEF, 0x4E, 0xB3, 0x3B, 0x5B, 0x7C, 0x10, 0x7F, 0x86, 0x10, 0xFC, 0xC1, 0xEC, 0xFF,
            0x71, 0x1A, 0x3F, 0xF8, 0x1C, 0x84, 0xE2, 0xFE, 0x0C, 0xC1, 0xB2, 0x40, 0x84, 0x10,
            0x59, 0x7C, 0x16, 0x02, 0x4B, 0x82, 0x0C, 0xB2, 0x64, 0xA0, 0xCF, 0x40, 0x73, 0xA1,
            0xB6, 0xCF, 0x42, 0xA7, 0x81, 0xEE, 0x5C, 0xC0, 0x07, 0xFB, 0x4E, 0x5F, 0x08, 0x54,
            0xC7, 0x87, 0xE1, 0xCB, 0x7D, 0x83, 0x02, 0xAD, 0x68, 0x44, 0x11, 0xFB, 0xC2, 0x3E,
            0x9F, 0x86, 0x6F, 0xF7, 0x81, 0x87, 0x7D, 0xFB, 0xF0, 0x8F, 0xCF, 0x48, 0xD4, 0x3E,
            0x00, 0x00, 0x01, 0x7C, 0xFE, 0x81, 0x82, 0x0D, 0xB5, 0x67, 0x53, 0xF8, 0x40, 0xFA,
            0xD9, 0x04, 0x03, 0x6A, 0x2B, 0xF1, 0x71, 0xE8, 0x18, 0xA0, 0xDB, 0x05, 0x3E, 0x0C,
            0x1D, 0xF4, 0x1B, 0x72, 0xC3, 0x67, 0xC3, 0x2B, 0x11, 0xF1, 0x69, 0xE8, 0xC9, 0x5D,
            0x30, 0xF7, 0xAF, 0x35, 0x1B, 0x36, 0xF8, 0x38, 0x7E, 0xF1, 0x50, 0x30, 0x6D, 0xC5,
            0x59, 0x3E, 0x0C, 0x40, 0x7E, 0xB1, 0xD6, 0xAE, 0xBD, 0xA5, 0x42, 0x85, 0x36, 0xBF,
            0xD2, 0x10, 0xFD, 0xF2, 0x39, 0xF4, 0xB1, 0xD2, 0x24, 0x01, 0x80, 0x2D, 0xBF, 0x2A,
            0xE0, 0xC7, 0x1D, 0xA6, 0x2D, 0x3E, 0x08, 0x1E, 0x62, 0x19, 0x0B, 0x69, 0xB6, 0x6C,
            0x49, 0xF3, 0xAB, 0xF6, 0x80, 0xD8, 0x83, 0x7C, 0x14, 0x7E, 0x14, 0x4A, 0x43, 0xB0,
            0x25, 0xC9, 0x9D, 0x5F, 0x67, 0x58, 0x7C, 0x16, 0x7E, 0xD5, 0xC9, 0x0D, 0x0E, 0xEC,
            0x04, 0x28, 0x50, 0x70, 0xAB, 0x4F, 0xA2, 0xCF, 0xFA, 0xE1, 0x43, 0x41, 0x68, 0x58,
            0xB3, 0x46, 0x48, 0x4C, 0xDC, 0xFA, 0xDB, 0x07, 0xF1, 0x6F, 0xE5, 0xFF, 0xF0, 0x2A,
            0xB7, 0xF0, 0x28, 0x71, 0xBA, 0xD7, 0xD6, 0xDC, 0x3E, 0x87, 0x7E, 0xCB, 0xC1, 0x0F,
            0x5B, 0x3B, 0x74, 0xE0, 0x38, 0xB8, 0x25, 0x43, 0x6C, 0x10, 0x90, 0xE6, 0x8C, 0x8F,
            0xE1, 0x87, 0x16, 0xB1, 0x90, 0x41, 0x86, 0x2E, 0xC1, 0x82, 0xFD, 0xD8, 0xD7, 0xE2,
            0xB6, 0x0F, 0xE2, 0x3F, 0x73, 0x07, 0xD6, 0x94, 0xE0, 0xFF, 0x41, 0x70, 0x61, 0x47,
            0x2F, 0x41, 0x24, 0xCD, 0x2B, 0x1F, 0x03, 0x0F, 0x50, 0x8F, 0x7E, 0x82, 0x0B, 0x2D,
            0xCE, 0x6C, 0xD0, 0x76, 0xC7, 0x87, 0x00, 0x04, 0xE3, 0xC1, 0x99, 0xD8, 0x04, 0x2D,
            0x08, 0x4E, 0x63, 0x80, 0x12, 0x92, 0x4E, 0x1A, 0x1F, 0x02, 0x0F, 0x7E, 0x35, 0xC3,
            0x35, 0x49, 0xE8, 0x63, 0xB3, 0x67, 0xC9, 0x02, 0x13, 0xD0, 0x48, 0x9A, 0x5E, 0x3E,
            0x83, 0xFF, 0x76, 0x1D, 0xC0, 0x30, 0x1B, 0x5B, 0xE0, 0x8B, 0x2C, 0x0C, 0xFA, 0x7D,
            0x10, 0x86, 0xBC, 0x8D, 0x27, 0x4A, 0x40, 0x13, 0x02, 0x7E, 0x0A, 0x29, 0xC3, 0x47,
            0xE1, 0x27, 0xE4, 0x60, 0xBF, 0x11, 0x45, 0x80, 0xF0, 0x49, 0x04, 0x73, 0xF6, 0xA9,
            0x16, 0x21, 0x08, 0x92, 0xCC, 0xF1, 0x51, 0xFC, 0xB1, 0x03, 0xAD, 0xB8, 0x40, 0x70,
            0x1A, 0xC0, 0xD4, 0x49, 0xE2, 0xB3, 0xF0, 0x41, 0x97, 0x7D, 0xB1, 0x2F, 0xD4, 0xA9,
            0x83, 0x51, 0x2E, 0xEC, 0xF3, 0x71, 0x00, 0x16, 0xD8, 0xC8, 0x36, 0x18, 0xCA, 0x87,
            0xC1, 0x3B, 0x47, 0xD0, 0x34, 0x15, 0x61, 0xCE, 0x2F, 0x1F, 0xC8, 0x0F, 0x81, 0x73,
            0xDF, 0xF6, 0x29, 0xD8, 0xC6, 0x07, 0x00, 0x00, 0x01, 0x7C, 0xFE, 0x81, 0x0B, 0x6A,
            0xCF, 0x26, 0xF0, 0x79, 0xE4, 0xA1, 0x72, 0x6F, 0xD8, 0x30, 0xDB, 0x07, 0x02, 0xE0,
            0xF6, 0x6C, 0xFA, 0x01, 0xF6, 0xFB, 0x28, 0x00, 0xDC, 0xE6, 0xBE, 0x0D, 0x8F, 0xDB,
            0xB5, 0x79, 0xE8, 0xAF, 0xF8, 0x20, 0xFA, 0x0D, 0xB5, 0x7B, 0x1B, 0x2D, 0x84, 0x14,
            0xEC, 0x00, 0x13, 0x1F, 0x84, 0x8F, 0xDA, 0xAF, 0x88, 0x4D, 0x08, 0x88, 0xD8, 0xDA,
            0x21, 0xF7, 0xEC, 0x0C, 0x3E, 0x08, 0x1E, 0x5E, 0xF5, 0x7E, 0x85, 0x0B, 0xB5, 0x11,
            0xE0, 0x55, 0x6E, 0x7B, 0x7C, 0x10, 0xFF, 0x86, 0xDE, 0xD2, 0x41, 0x08, 0xE0, 0x08,
            0x83, 0x4F, 0xE2, 0x0F, 0x30, 0x5B, 0x38, 0xC9, 0x26, 0xE5, 0x04, 0xB5, 0x07, 0xF8,
            0x30, 0xE0, 0x93, 0x4E, 0x5B, 0xD4, 0x6F, 0x49, 0xB3, 0xC5, 0x87, 0xA1, 0x5F, 0x6D,
            0xEC, 0xA0, 0x66, 0x8F, 0xE5, 0xD3, 0xF8, 0x31, 0x04, 0x1A, 0x62, 0x0D, 0xBA, 0xA3,
            0xDE, 0x27, 0xE1, 0x8B, 0x07, 0xB1, 0xDC, 0xB1, 0xEA, 0x9C, 0x01, 0xA8, 0x0E, 0x5B,
            0x7D, 0x18, 0x82, 0x96, 0xE8, 0xFD, 0x7B, 0xEB, 0x87, 0xAD, 0x05, 0x0B, 0xFE, 0x8E,
            0x55, 0xC2, 0x87, 0xF1, 0x67, 0xF8, 0xFD, 0x81, 0xA0, 0x60, 0xAC, 0x2E, 0x19, 0x7C,
            0x1A, 0x7F, 0x89, 0x58, 0xF4, 0xBF, 0xBB, 0xFC, 0xF8, 0xE1, 0xD3, 0xF8, 0x93, 0x94,
            0x38, 0xDD, 0xEB, 0xE0, 0x96, 0x0C, 0x0A, 0x62, 0xFB, 0x2C, 0xFE, 0xD3, 0xB1, 0x4F,
            0xFF, 0x6A, 0xB6, 0x8F, 0x9D, 0xC7, 0x87, 0xF1, 0xE3, 0x87, 0xD8, 0xFC, 0x17, 0x2E,
            0xB4, 0xC8, 0xE1, 0xE3, 0xE8, 0x43, 0xEC, 0xBB, 0xC3, 0xDF, 0xA2, 0xC5, 0x3E, 0x9F,
            0x06, 0x3F, 0x82, 0x85, 0x08, 0x76, 0xE7, 0x4E, 0x9A, 0x0C, 0xC1, 0xB2, 0xF8, 0x20,
            0xFC, 0xA6, 0x60, 0x8B, 0xFE, 0x11, 0xF8, 0xE0, 0xCE, 0xBE, 0x2C, 0xF8, 0xC4, 0x67,
            0xA1, 0xA3, 0x12, 0x59, 0xCC, 0x07, 0x77, 0x4E, 0xCB, 0x2F, 0x3E, 0x0B, 0x5D, 0xC5,
            0x1E, 0x11, 0xEC, 0xC7, 0x69, 0x82, 0x0C, 0x3F, 0x2E, 0x9C, 0xF1, 0x61, 0xF0, 0x25,
            0x50, 0xA3, 0x3A, 0xC8, 0x85, 0x20, 0xD0, 0x85, 0x2E, 0x3E, 0x0C, 0x80, 0xFD, 0xD8,
            0x77, 0x21, 0x76, 0x8B, 0x0B, 0xA7, 0xE1, 0x49, 0x2C, 0x9F, 0x06, 0xD0, 0x08, 0x64,
            0x23, 0x90, 0xE7, 0xA3, 0xF0, 0xA3, 0xCF, 0x23, 0xF0, 0x01, 0x00, 0x00, 0x01, 0x7C,
            0xFE, 0x81, 0x05, 0xB3, 0x67, 0x5F, 0xF1, 0x89, 0xEC, 0x1B, 0x66, 0x7B, 0x02, 0x1F,
            0x88, 0x8E, 0xDB, 0x14, 0xB5, 0x6B, 0xFB, 0x38, 0x00, 0x10, 0xDF, 0x1E, 0x30, 0x3B,
            0xF7, 0x86, 0xDC, 0x3C, 0x3E, 0x0C, 0x3D, 0xF0, 0x81, 0xC7, 0x2B, 0xF2, 0xDA, 0x42,
            0xE2, 0xB3, 0xE0, 0xB1, 0x41, 0xBD, 0x0C, 0x90, 0x0F, 0x3E, 0x8A, 0x7F, 0x22, 0xF3,
            0x6D, 0x68, 0xA8, 0xDD, 0xDB, 0x21, 0xE4, 0x93, 0xF8, 0x7F, 0x6D, 0x40, 0x1E, 0x84,
            0x00, 0x07, 0x0C, 0xF0, 0x61, 0xF8, 0x91, 0x66, 0x43, 0x87, 0x82, 0xF0, 0x80, 0x3E,
            0xAF, 0xD4, 0xFB, 0x28, 0x7E, 0x66, 0x60, 0xE8, 0x20, 0x23, 0x06, 0x60, 0x54, 0x1A,
            0x1F, 0x05, 0x3F, 0xAD, 0x6A, 0x0B, 0x00, 0x09, 0x03, 0x53, 0x1B, 0xD2, 0xBC, 0xF2,
            0x49, 0xFC, 0xF7, 0xC8, 0x45, 0x0F, 0x80, 0x70, 0x6C, 0x49, 0x13, 0xCB, 0x27, 0xF1,
            0x77, 0xC0, 0x2E, 0xE8, 0x90, 0x6E, 0x08, 0xF5, 0x9B, 0xC9, 0x07, 0xD1, 0xDF, 0x3E,
            0x0D, 0x2E, 0x4A, 0x64, 0xD8, 0xD2, 0xBB, 0x77, 0xC1, 0x0F, 0x04, 0x1D, 0x7C, 0x10,
            0x3F, 0x68, 0x88, 0x4D, 0x90, 0x81, 0x20, 0x56, 0xC1, 0xAD, 0xFC, 0x5B, 0x7D, 0x12,
            0xFF, 0x85, 0xD8, 0x49, 0x5A, 0x9C, 0x16, 0x00, 0x30, 0xC2, 0x87, 0xAE, 0xB1, 0x6E,
            0xFB, 0x18, 0xFA, 0x33, 0x75, 0xEE, 0xA4, 0x49, 0x73, 0xBA, 0x85, 0x09, 0x01, 0x00,
            0xDC, 0xF9, 0xE5, 0x73, 0x10, 0x0C, 0x79, 0x9D, 0x33, 0x67, 0xF0, 0x45, 0x0B, 0x13,
            0x40, 0x89, 0x34, 0x15, 0x7C, 0x0E, 0xFF, 0x6D, 0x78, 0x14, 0x80, 0x38, 0xD8, 0xBE,
            0xD8, 0x39, 0x72, 0x40, 0x80, 0xD8, 0x77, 0xEE, 0x9C, 0xF1, 0x49, 0x00, 0xA9, 0xC4,
            0x8F, 0x10, 0xC1, 0x7E, 0x20, 0x00, 0x82, 0x12, 0x77, 0x00, 0x42, 0x6E, 0x9F, 0xC3,
            0x5F, 0x02, 0x1E, 0x84, 0xF8, 0xF1, 0x03, 0x01, 0x64, 0x09, 0xB1, 0xEF, 0x4E, 0xB3,
            0x3B, 0x5B, 0x7C, 0x10, 0x7F, 0x86, 0x10, 0xFC, 0xC1, 0xEC, 0xFF, 0x71, 0x1A, 0x3F,
            0xF8, 0x1C, 0x84, 0xE2, 0xFE, 0x0C, 0xC1, 0xB2, 0x40, 0x84, 0x10, 0x59, 0x7C, 0x16,
            0x02, 0x4B, 0x82, 0x0C, 0xB2,
        ];

        let assert_output = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x0D, 0xDA, 0xD9, 0x0D, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xD9, 0xD9, 0xD9, 0x01, 0xDA, 0xD9, 0xD9, 0xD9, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x01, 0xD9, 0xD9, 0xD9, 0xD9, 0xD9,
            0xD9, 0xD9, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x01, 0xD9, 0x0D,
            0xDC, 0x0D, 0xDA, 0x0D, 0x57, 0xDA, 0xD9, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xD9, 0xD9, 0xD9, 0xDC, 0x82, 0xDC, 0x5F, 0x35, 0x0D, 0x0D, 0xD9, 0xD9, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xD9, 0xD9, 0x0D, 0xDC, 0x0D, 0x82, 0xB4, 0x8A, 0x59, 0xD9,
            0xD9, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0xD9, 0xD9, 0xDA, 0xDA, 0x2D, 0x0A,
            0x0A, 0x36, 0x5F, 0x34, 0xD9, 0xDA, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x34, 0x24, 0xD9,
            0xD9, 0xDC, 0x83, 0x5F, 0x5F, 0x35, 0x33, 0x82, 0xDB, 0x2D, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x58, 0x5F, 0x34, 0xD9, 0xDA, 0x83, 0x0F, 0xD9, 0x34, 0x5F, 0xD9, 0x82, 0x58, 0x41,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x42, 0x34, 0x34, 0x83, 0x0F, 0x0D, 0x34, 0x5F,
            0x24, 0x5E, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0xDC, 0x2D, 0x34,
            0x5F, 0x34, 0x35, 0x5F, 0x34, 0x34, 0x82, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC,
            0x0F, 0x0F, 0x82, 0x33, 0x34, 0x35, 0x35, 0x34, 0x34, 0x2D, 0x89, 0xAD, 0xDF, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xAD, 0x0F, 0x0F, 0x0F, 0x57, 0xDC, 0x33, 0x34, 0x2D, 0x12, 0xD3,
            0x5E, 0xAD, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x83, 0x0F, 0xAD, 0x0E, 0x0E, 0x0F, 0xAD,
            0x83, 0x2D, 0x0C, 0xD8, 0x33, 0x34, 0x34, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x3B, 0x58, 0x2D,
            0x12, 0x0C, 0x2E, 0x60, 0x60, 0x1F, 0x7D, 0x16, 0xDB, 0x34, 0x34, 0x33, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,
            0x3B, 0x3B, 0x34, 0x12, 0x12, 0x0C, 0x1F, 0x1F, 0x1F, 0x0B, 0x1D, 0x5E, 0xDC, 0x2D,
            0x34, 0x34, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x34, 0x3B, 0x34, 0x24, 0x12, 0x12, 0x0C, 0x0C, 0x0C, 0x0B, 0x16,
            0x33, 0x0D, 0x00, 0x34, 0x3B, 0x5F, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x3B, 0x3B, 0x34, 0x33, 0xD8, 0xD8, 0xD8,
            0x16, 0x16, 0x16, 0xD3, 0x0C, 0x0C, 0x12, 0x34, 0x34, 0x34, 0x34, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x5F, 0x66, 0x5F,
            0x34, 0x24, 0xD8, 0x16, 0xD8, 0xD3, 0x0C, 0x2C, 0x2C, 0x12, 0x0C, 0x00, 0x2D, 0x34,
            0x5E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xDB, 0x3A, 0x3B, 0x33, 0xD9, 0x1F, 0x1F, 0x0C, 0x1F, 0x2C, 0x1F, 0x2C, 0x2C, 0x12,
            0x0C, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xDB, 0x33, 0x00, 0x12, 0x60, 0x1F, 0x1F, 0x1F, 0x2C,
            0x1F, 0x1F, 0x2C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x2C,
            0x1F, 0x1F, 0x1F, 0x2C, 0x0C, 0x1F, 0x1F, 0x1F, 0x12, 0x0C, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x39, 0x7D, 0x1F, 0x1F, 0x1F, 0x1F, 0x0C, 0x1F, 0x1F, 0x1F, 0x24, 0x39,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x40, 0x15, 0x0B, 0x0B, 0x0B, 0xD3, 0x0B,
            0x16, 0x3A, 0x24, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x7D, 0xD8, 0x0B,
            0x3A, 0x3A, 0xD8, 0x16, 0x0B, 0x7D, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x0C, 0x12, 0x0C, 0x0C, 0x12, 0x0C, 0x2E, 0x2D, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x34, 0x8A, 0x5F, 0x34, 0x5F, 0x2D,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xDC,
            0xDB, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ];

        let output = from_standard_lz(&input);

        assert_eq!(assert_output.to_vec(), output);
    }
}
